trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/**
      - public/**
      - package.json

pr:
  branches:
    include:
      - main
  paths:
    include:
      - src/**
      - public/**
      - package.json
      - tailwind.config.js

resources:
  repositories:
    - repository: self
      type: github
      name: diaandrei/Movies-App-Front-End
      ref: main

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        pool:
          name: moviesagent
          demands:
            - Agent.Name -equals MoviesPipelineAgent
        timeoutInMinutes: 30

        steps:
          - task: NodeTool@0
            displayName: "Install Node.js"
            inputs:
              versionSpec: "20.x"

          - script: mkdir -p $(Pipeline.Workspace)/.npm
            displayName: "Ensure .npm directory exists"

          - task: Cache@2
            displayName: "Cache npm"
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.npm

          - script: |
              export NODE_OPTIONS=--max_old_space_size=2048
              npm ci --legacy-peer-deps
            displayName: "Install Dependencies"
            continueOnError: false

          - script: |
              export NODE_OPTIONS=--max_old_space_size=2048
              INLINE_RUNTIME_CHUNK=false
              GENERATE_SOURCEMAP=false
              npm run build
            displayName: "Build"
            continueOnError: false

          - script: |
              zip -r build.zip build
            displayName: "Create ZIP package"

          - task: PublishPipelineArtifact@1
            displayName: "Publish Artifact"
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/build.zip"
              artifactName: "drop"
              publishLocation: "Pipeline"

  - stage: Approval
    displayName: "Approval Before Deploy"
    dependsOn: Build
    jobs:
      - job: ManualApproval
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please approve or reject the deployment.'

  - stage: DeployToProduction
    displayName: "Production"
    dependsOn: Approval
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: "Production"
        pool:
          name: moviesagent
          demands:
            - Agent.Name -equals MoviesPipelineAgent

        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: "drop"

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "Visual Studio Enterprise Subscription(e5855b08-7ae6-492b-b26a-0729c22fa918)"
                    appType: "webApp"
                    appName: "moviesFrontEnd"
                    package: "$(Pipeline.Workspace)/drop/build.zip"
